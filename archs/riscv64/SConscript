# Copyright 2023 Andrew Oates.  All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Import('env AposAddSources')

srcs = [
  'arch/common/debug.c',
  'arch/common/die.c',
  'arch/dev/double_fault.c',
  'arch/dev/interrupts.c',
  'arch/dev/interrupts_asm.s',
  'arch/dev/io.c',
  'arch/dev/irq.c',
  'arch/memory/page_map.c',
  'arch/proc/exec.c',
  'arch/proc/kthread.c',
  'arch/proc/kthread_asm.s',
  'arch/proc/signal_enter.c',
  'arch/proc/sigreturn_trampoline.s',
  'arch/proc/stack_trace.c',
  'arch/proc/user_context.s',
  'arch/proc/user_mode.c',
  'arch/syscall/context.c',
  'arch/syscall/init.c',
  'internal/page_tables.c',
  'internal/sbi.c',
  'internal/timer.c',
]

subdirs = ['internal/load']

env.Append(CFLAGS = Split("-mcmodel=medany"))
env.Append(LINKFLAGS = Split("--no-relax"))

def build_shared_constants(env, source):
  types = (('asm', '.s'), ('ld', '.ld'), ('c', '.h'))
  out = []
  for gentype, suffix in types:
    out.extend(
        env.Command('${SOURCE}' + suffix, source,
                    'm4 -Dgentype=%s ${SOURCE} > ${TARGET}' % gentype))
  return out

env.AddMethod(build_shared_constants, 'SharedConstants')
env.SharedConstants('internal/memlayout.m4')
# TODO(aoates): figure out a better way to pass these dependencies.
env.Depends('#/$BUILD_CFG_DIR/kernel.bin', 'internal/memlayout.m4.ld')
env.Depends('internal/load/loader.PHYS.o', 'internal/memlayout.m4.s')
env.Depends('arch/dev/interrupts_asm.o', 'internal/memlayout.m4.s')

objects = AposAddSources(env, srcs, subdirs)
Return('objects')
